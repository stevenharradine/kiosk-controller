#!/bin/bash
set -e

# =====================================
# Configuration
# =====================================

KIOSK_FALLBACK_PORT=8000
KIOSK_FALLBACK_PAGE="http://google.com"

KIOSK_PYTHON_LOG=./data/python.log
KIOSK_CHROME_LOG=./data/chrome.log

KIOSK_PYTHON_PID=./data/python.pid

KIOSK_CONFIG_PORT=./data/config-port
KIOSK_CONFIG_PAGE=./data/config-page
KIOSK_CONFIG_LAST=./data/config-last
KIOSK_CONFIG_AUTH=./data/config-auth
KIOSK_CONFIG_PAGE_TEMP=./data/config-temp

# =====================================
# Functions
# =====================================

function check_dependencies {
  local STATUS=0
  command -v chromium-browser >/dev/null 2>&1 || {
    >&2 echo "Missing chromium-browser: sudo apt-get install chromium-browser"
    STATUS=1;
  }
  command -v python3 >/dev/null 2>&1 || {
    >&2 echo "Missing python3: sudo apt-get install python3";
    STATUS=1;
  }
  return $STATUS
}

function initialize {
  export DISPLAY=:0

  touch $KIOSK_PYTHON_LOG $KIOSK_CHROME_LOG $KIOSK_PYTHON_PID \
        $KIOSK_CONFIG_PORT $KIOSK_CONFIG_PAGE $KIOSK_CONFIG_LAST \
        $KIOSK_CONFIG_PAGE_TEMP $KIOSK_CONFIG_AUTH

  if ! check_dependencies; then
    echo "Please install the missing dependencies"
    exit 1
  fi
}

function set_page {
  if [ -z "$1" ]; then
    echo "No page specified"
    exit 1
  fi
  echo "$1" > $KIOSK_CONFIG_PAGE
}

function set_temp_page {
  if [ -z "$1" ]; then
    >&2 echo "No page specified"
    exit 1
  fi
  echo "$1" > $KIOSK_CONFIG_PAGE_TEMP
}

function set_port {
  if ! [[ "$1" =~ ^[0-9]+$ ]]; then
    >&2 echo "No valid port specified"
    exit 1
  fi
  echo "$1" > $KIOSK_CONFIG_PORT
}

function set_auth {
  echo "$1" > $KIOSK_CONFIG_AUTH
}

function get_port {
  KIOSK_PORT=$(cat $KIOSK_CONFIG_PORT)
  if [ -z "$KIOSK_PORT" ]; then
    KIOSK_PORT=$KIOSK_FALLBACK_PORT
  fi
}

function get_auth {
  KIOSK_AUTH=$(cat $KIOSK_CONFIG_AUTH)
  if [ -z "$KIOSK_AUTH" ]; then
    KIOSK_AUTH=""
  fi
}

function get_page {
  KIOSK_PAGE=$(cat $KIOSK_CONFIG_PAGE_TEMP)
  echo "" > $KIOSK_CONFIG_PAGE_TEMP
  if [ -z "$KIOSK_PAGE" ]; then
    KIOSK_PAGE=$(cat $KIOSK_CONFIG_PAGE)
  fi
  if [ -z "$KIOSK_PAGE" ]; then
    KIOSK_PAGE=$KIOSK_FALLBACK_PAGE
  fi
  echo $KIOSK_PAGE > $KIOSK_CONFIG_LAST
}

function start_chromium {
  get_page
  nohup chromium-browser --incognito \
        --kiosk $KIOSK_PAGE >$KIOSK_CHROME_LOG 2>&1 &
  echo "  [Chromium] Started with URL $KIOSK_PAGE"
}

function start_python_api {
  get_port
  get_auth
  if [[ "$KIOSK_PORT" = "0" ]]; then
    echo "[Python API] Offline because port=0"
    return
  fi
  nohup python3 -u kiosk-http-api.py $0 $KIOSK_PORT $KIOSK_CONFIG_LAST \
                $KIOSK_CONFIG_PAGE $KIOSK_CONFIG_PAGE_TEMP $KIOSK_AUTH \
        >$KIOSK_PYTHON_LOG 2>&1 &
  echo $! > $KIOSK_PYTHON_PID
  echo "[Python API] Starting at PID $! on port $KIOSK_PORT"
}

function stop_chromium {
  (pkill chromium && \
  echo "  [Chromium] Stopping existing chromium instances") || true
}

function stop_python_api {
  local PID=$(cat $KIOSK_PYTHON_PID)
  if ps -p $PID 2> /dev/null | grep -q "python"; then
    echo "[Python API] Stopping at PID $PID."
    kill $PID
  fi
}

function usage {
  echo "Usage: kiosk <command> [<args>]"
  echo "Controls a Chromium kiosk mode instance"
  echo "For details on the HTTP API this exposes, consult the README"
  echo
  echo "  api               (re)starts just the API"
  echo "  auth <pass>       changes the API password; leave blank for none"
  echo "  chromium          (re)starts just Chromium"
  echo "  help              prints this help"
  echo "  page <url>        sets the default page"
  echo "  port <number>     sets the default API port; 0 to disable API"
  echo "  start             (re)starts the API server and Chromium"
  echo "  start <url>       one-time (re)start with the specified url"
  echo "  stop              stops the API server and Chromium"
}

# =====================================
# Initialization
# =====================================

initialize

if [ "$1" == "api" ]; then
  stop_python_api
  start_python_api
elif [ "$1" == "auth" ]; then
  set_auth $2
elif [ "$1" == "chromium" ]; then
  stop_chromium
  start_chromium
elif [ "$1" == "page" ]; then
  set_page $2
elif [ "$1" == "port" ]; then
  set_port $2
elif [ "$1" == "start" ]; then
  stop_chromium
  stop_python_api
  if [ -n "$2" ]; then
    set_temp_page $2
  fi
  start_chromium
  start_python_api
elif [ "$1" == "stop" ]; then
  stop_chromium
  stop_python_api
else
  usage
fi
