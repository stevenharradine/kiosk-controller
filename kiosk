#!/bin/bash
set -e

function write_settings {
  echo "$KIOSK_PAGE" > $KIOSK_PAGE_FILE
  echo "$KIOSK_PORT" > $KIOSK_PORT_FILE
}

function check_dependencies {
  local KIOSK_STATUS=0
  command -v chromium-browser >/dev/null 2>&1 || {
    echo "Missing chromium-browser: sudo apt-get install chromium-browser";
    KIOSK_STATUS=1;
  }
  command -v python3 >/dev/null 2>&1 || {
    echo "Missing python3: sudo apt-get install python3";
    KIOSK_STATUS=1;
  }
  if [[ ! -f bottle.py ]]; then
    echo "Missing bottle.py library: wget -q http://bottlepy.org/bottle.py"
    KIOSK_STATUS=1;
  fi
  return $KIOSK_STATUS
}

function stop_chrome {
  (pkill chromium && echo "Stopping existing chromium instances") || true
}

function start_chrome {
  DISPLAY=:0 nohup chromium-browser --kiosk $KIOSK_PAGE >logs/chromium.log 2>&1 &
  KIOSK_CHROME_PID=$!
  echo "$KIOSK_PAGE" > $KIOSK_CURR_FILE
  echo "Starting chromium with URL $KIOSK_PAGE"
}

function stop_python_api {
  if ps -p $KIOSK_PYTHON_PID 2> /dev/null | grep -q "python"; then
    echo "Stopping http api at PID $KIOSK_PYTHON_PID on port $KIOSK_PORT"
    kill $KIOSK_PYTHON_PID
  fi
}

function start_python_api {
  nohup python3 kiosk-http-api.py $KIOSK_PORT >logs/python-http-api.log 2>&1 &
  KIOSK_PYTHON_PID=$!
  echo $KIOSK_PYTHON_PID > $KIOSK_PID_FILE
  echo "Starting http api at PID $KIOSK_PYTHON_PID on port $KIOSK_PORT"
}

function page {
  if [ "$1" == "" ]; then
    echo "No page specified"
    exit 1
  fi
  KIOSK_PAGE=$1
}

function port {
  if ! [[ "$1" =~ ^[0-9]+$ ]]; then
    echo "No valid port specified"
    exit 1
  fi
  KIOSK_PORT=$1
}

function usage {
  echo "Usage: kiosk <command> [<args>]"
  echo "Controls a Chromium kiosk mode instance"
  echo "For details on the HTTP API this exposes, consult the README"
  echo
  echo "  help              prints this help"
  echo "  page <url>        sets the default page"
  echo "  port <number>     sets the default API port; 0 to disable"
  echo "  start             (re)starts the API server and Chromium"
  echo "  start <url>       one-time (re)start with the specified url"
  echo "  stop              stops the API server and Chromium"
}

# =====================================
# Settings and Initialization
# =====================================

# configuration
KIOSK_PAGE_FILE=./data/kiosk_page
KIOSK_CURR_FILE=./data/kiosk_curr # the most recently displayed page
KIOSK_PORT_FILE=./data/kiosk_port
KIOSK_PID_FILE=./data/kiosk_python.pid

# initialization
touch $KIOSK_PAGE_FILE $KIOSK_PORT_FILE $KIOSK_PID_FILE $KIOSK_CURR_FILE
KIOSK_PAGE=`cat $KIOSK_PAGE_FILE`
KIOSK_PORT=`cat $KIOSK_PORT_FILE`
KIOSK_PYTHON_PID=`cat $KIOSK_PID_FILE`
[[ "$KIOSK_PAGE" == "" ]] && KIOSK_PAGE="http://google.com"
[[ "$KIOSK_PORT" == "" ]] && KIOSK_PORT=8000
[[ "$KIOSK_PYTHON_PID" == "" ]] && KIOSK_PYTHON_PID=0

# start the program
if ! check_dependencies && ! [ "$1" == "help" ] ; then
  echo "Please install the missing dependencies"
  exit 1
fi

if [ "$1" == "page" ]; then
  page $2
  write_settings
elif [ "$1" == "port" ]; then
  port $2
  write_settings
elif [ "$1" == "start" ]; then
  stop_chrome
  stop_python_api
  [ -z "$2" ] || KIOSK_PAGE=$2
  start_chrome
  [ "$KIOSK_PORT" = "0" ] || start_python_api
elif [ "$1" == "stop" ]; then
  stop_chrome
  stop_python_api
else
  usage
fi
